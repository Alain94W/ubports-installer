script.
  // CATCH ANY ERRORS!
  var onErr = (err) => {
    if(utils.getUpdateAvailable()) {
      $("#not-latest-stable").show();
      if (utils.isSnap()) {
        $("#snap-update-instructions-error").show();
      } else {
        $("#generic-update-instructions-error").show();
      }
    }
    $("#error-body").text(err);
    $("#errorModal").modal("show");
    modals.hide("password");
  }
  window.onerror = (err, url, line) => {
    onErr(err+" (MainRenderer:"+line+")");
  }

  // START
  utils.log.info("Welcome to the UBports Installer version " + properties.installer.version + "!");
  header.version_info.set(properties.installer.version);
  views.show("start");
  // $(".particles-foreground").show()
  // $(".particles-background").show()
  footer.topText.set("UBports Installer is starting up").append("<span id='wait-dot'>.</span>");
  footer.underText.set("Starting adb service...");

  devices.getDeviceSelects((out) => {
    if (out) {
      $("#device-select").append(out);
    } else {
      $('#no-network-modal').modal('show');
    }
  });

  if(!utils.debugScreen()) {
    // START ADB
    adb.start(false, false, (err) => {
      setTimeout(() => {
        // $(".particles-foreground").hide()
        // $(".particles-background").hide()
        footer.topText.set("Waiting for device").append("<span id='wait-dot'>.</span>");
        footer.underText.set("Please connect your device with a USB cable");
        views.show("wait-for-device");
      }, 1000);
      var waitEvent = devices.waitForDevice(mainEvent);
      // Button to open device selector
      $("#btn-modal-select-device").click(() => {
        waitEvent.emit("stop");
        $('#select-device-modal').modal('show');
      });
      // Button to confirm device selection
      $("#btn-select-device").click(() => {
        var device = $("#device-select").find(":selected").attr("name");
        waitEvent.emit("device:select", device);
        console.log("device selected: " + device)
      });
      waitEvent.on("user:error", onErr);
      waitEvent.on("device:select", (device) => {
        console.log("device selected recieved" + device)
        $('#select-device-modal').modal('hide');
      });
      utils.debugTrigger(waitEvent, 1);
    });

    modals.bind("options");
    options.init();
  }else {
    if (utils.debugScreen().startsWith("modal:")){
      var modal=utils.debugScreen().split(":")[1]
      setTimeout(function () {
        $("#"+modal).modal("show");
      }, 10);
    } else {
      views.show(utils.debugScreen());
    }
  }

  const mainEvent = (output, device, channels, ubuntuCom, autoDetected, isLegacyAndroid) => {
    views.show("install");
    if(!output) {
      $("#device-name").text("Device not supported");
      $("#device-under-text").text("The device " + device + " is not supported");
      $("[id=your-device]").text(device)
      views.show("not-supported");
      $("#btn-inst").hide();
    } else {
      views.show("install");
      $("#options-channel").append(channels);
      options.optionsValToUser();
      $('#select-device-modal').modal('hide')
      $("#btn-inst").show();
      $("#device-name").text(output.name);
      if (isLegacyAndroid && !ubuntuCom)
      $("#legacy-android-note").show();
      if (autoDetected)
      footer.underText.set("Are you ready for Ubuntu Touch on your " + output.name + "?");
      else
      footer.underText.set("Please connect your " + output.name + " with a USB cable.");
      $("#your-ubp-device").text(output.name+" ("+output.device+")")
      $("#your-ubp-device").click(() => {
        shell.openExternal("https://devices.ubuntu-touch.io/device/"+output.device);
      });

      views.show(ubuntuCom ? "switch" : "install")

      $("#btn-inst").click(() => {
        $('#installModal').modal('show');
        if(options.get("custom-tools", true)) {
          utils.setCustomPlatformTool("adb", options.get("custom-tools-adb"));
          utils.setCustomPlatformTool("fastboot", options.get("custom-tools-fastboot"));
        }
      });
      $("#btn-installModal").click(() => {
        views.show("installing");
        $("#progress").show();
        const installEvent = devices.install({
          device: output.device,
          channel: options.get("channel", true),
          wipe: options.get("wipe", true)
        });

        installEvent.on("user:error", onErr);

        installEvent.on("bootstrap:flashing", () => {
          views.show("installing");
          $("#device-under-text").text("Flashing recovery and boot images")
        })

        installEvent.on("system-image:start", () => {
          views.show("installing");
        })

        installEvent.on("install:done", () => {
          views.show("done");
          $("#device-name").text("Done");
        });

        installEvent.on("user:password", () => {
          modals.show("password")
          $("#password-input").val("");
          $("#password-input").keypress((event) => {
            if (event.which == '13') {
              event.preventDefault();
              installEvent.emit("password", $("#password-input").val());
              modals.hide("password")
              $('#password-wrong').hide();
            }
          });
          $("#btn-password").click(() => {
            installEvent.emit("password", $("#password-input").val());
            $('#password-wrong').hide();
          });
        });

        installEvent.on("user:oem-lock", (callback) => {
          $('#oem-lock').modal('show');

          $("#btn-unlock").click(() => {
            $("#btn-unlock").attr("disabled", true);
            $("#btn-exit").attr("disabled", true);
            $("#unlock-prog").removeClass("hidden");
            devices.instructOemUnlock(installEvent, (err) => {
              $("#btn-unlock").attr("disabled", false);
              $("#btn-exit").attr("disabled", false);
              $("#unlock-prog").addClass("hidden");
              if (err) {
                $('#oem-lock').modal('hide');
              } else {
                callback(callback)
                $('#oem-lock').modal('hide');
              }
            });
          });
        });

        installEvent.on("user:password:wrong", () => {
          installEvent.emit("user:password");
          $('#password-wrong').show();
        });

        installEvent.on("user:reboot", (i) => {
          views.show("reboot-"+i.button);
          $("[id=reboot-to-state]").text(i.state);
          $("#device-name").text("Please reboot to "+i.state);
          $("#device-under-text").text(i.instruction.split(".")[0]);
        });

        installEvent.on("adb:rebooted", () => {
          $('#views-reboot-up').hide();
          $('#views-reboot-down').hide();
        });

        installEvent.on("reboot:done", () => {
          views.show("installing");
          $('#views-reboot-up').hide();
          $('#views-reboot-down').hide();
        });

        installEvent.on("user:write:next", (text, current, total) => {
          $("#device-under-text").text(text + " file " + current + " of " + total);
        });

        installEvent.on("user:write:start", (text, length) => {
          $("#device-under-text").text(text+" file 1 of "+length);
        });

        installEvent.on("user:write:progress", (length) => {
          if(length >= 100) {
            length=100;
          }
          $("#progress").width(length.toString()+"%");
        });
        installEvent.on("user:write:done", () => {
          $("#device-under-text").text("");
          $("#progress").width("0%");
        });
        installEvent.on("user:write:status", (status) => {
          $("#device-name").text(status).append("<span id='wait-dot'>.</span>");
        });

        utils.debugTrigger(installEvent, 2);
      })
    }
  };
