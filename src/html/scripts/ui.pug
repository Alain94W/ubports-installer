script.

  const switchHide = (from, to) => {
    $("."+from).hide();
    $("."+to).show();
  }

  const hideAll = (id) => {
    $("."+id).hide();
  }

  const showAll = (id) => {
    $("."+id).show();
  }

  const show = (cat, id) => {
    hideAll(cat);
    $("#"+cat+"-"+id).show();
  }

  const setText = (cat, id, text) => {
    $("."+cat+"-"+id).text(text);
  }

  const getValue = (cat, id) => {
    return $("#"+cat+"-"+id).val();
  }

  const animations = {
    hideAll: () => {
      $("#particles-foreground").hide();
      $("#particles-background").hide();
      $("#push-animation").hide();
      $("#download-animation").hide();
    },
    particles: () => {
      $("#particles-foreground").show();
      $("#particles-background").show();
      $("#push-animation").hide();
      $("#download-animation").hide();
    },
    download: () => {
      $("#download-animation").show();
      $("#push-animation").hide();
      $("#particles-foreground").hide();
      $("#particles-background").hide();
    },
    push: () => {
      $("#push-animation").show();
      $("#download-animation").hide();
      $("#particles-foreground").hide();
      $("#particles-background").hide();
    }
  }

  const views = {
    hideAll: () => hideAll("views"),
    show: (id, animation) => {
      if (id != "working"){
        if (id == "done") {
          $(".ubp-robot").addClass("ubp-robot-side");
          $(".ubp-robot").removeClass("ubp-robot-foot");
        } else {
          $(".ubp-robot").removeClass("ubp-robot-side");
          $(".ubp-robot").addClass("ubp-robot-foot");
        }
        animations.hideAll();
        show("views", id);
        return;
      } else {
        $(".ubp-robot").removeClass("ubp-robot-side");
        $(".ubp-robot").removeClass("ubp-robot-foot");
        show("views", "working");
        switch (animation) {
          case "particles":
            animations.particles()
            break;
          case "download":
            animations.download()
            break;
          case "push":
            animations.push()
            break;
          default:
            animations.hideAll();
        }
      }
    }
  }

  const userText = {
    set: (id, text) => setText("user", id, text),
    remove: id => setText("user", id, "")
  }

  const footer = {
    topText: {
      set: (text, dots) => {
        if (dots) $("#wait-dot").show()
        else $("#wait-dot").hide()
        return $("#footer-top").text(text)
      }
    },
    underText: {
      set: (text) => {
        return $("#footer-bottom").text(text)
      }
    },
    speedText: {
      set: (text) => {
        if (text) return $("#footer-speed").text(" at " + text + " MB/s");
        else return $("#footer-speed").text("");
      }
    }
  }

  const modals = {
    bind: modal => {
      $("#btn-modal-"+modal).click(() => {
        $('#'+modal+'-modal').modal('show');
      });
    },
    show: modal => {
      $('#'+modal+'-modal').modal('show');
    },
    hide: modal => {
      $('#'+modal+'-modal').modal('hide');
    }
  }

  function addOption(option) {
    let _div = document.createElement("div");
    _div.className = "form-group";
    let _label = document.createElement("label");
    _label.className = "col-xs-3 control-label";
    _label.appendChild(document.createTextNode(option.label));
    _div.appendChild(_label);

    let _subdiv = document.createElement("div");
    _subdiv.className = "col-xs-9";

    let _input = document.createElement("input");
    _input.className = "form-control space";
    _input.type = option.type;
    _input.value = option.value;
    _input.id = "options-" + option.id;

    console.log(_input);
    console.log(_div);
    _subdiv.appendChild(_input);
    _div.appendChild(_subdiv);
    $("#options-form").append(_div);
  }

  $("#btn-bugreport").click(() => {
    var title = $("#error-body").text();
    ipcRenderer.send("createBugReport", title);
  });

  $("#btn-exit").click(() => {
    var window = remote.getCurrentWindow();
    window.close();
  });

  $("#help").click(() => {
    ipcRenderer.send("createBugReport", "user-requested bug-report");
  });

  $("#donate").click(() => {
    shell.openExternal("https://ubports.com/donate");
  });

  $("#btn-modal-select-device-unsupported").click(() => {
    modals.show('select-device');
  });

  $("#btn-modal-dev-mode").click(() => {
    modals.show('developer-mode-info');
  });

  $("#btn-options-close").click(() => {
    modals.show('install');
  });

  if (process.platform === "win32" && !localStorage.getItem('neverAskForWindowsDrivers')) {
    modals.show('windows-drivers');
  }

  ipcRenderer.on("user:update-available", () => {
    if (global.packageInfo.isSnap) {
      $("#snap-update-instructions").show();
      $("#btn-update-installer").hide();
    } else {
      $("#generic-update-instructions").show();
    }
    modals.show('new-update');
  });
